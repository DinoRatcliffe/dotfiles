set nocompatible              " be iMproved, required
filetype off                  " required
set autoindent

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Plugins
Plugin 'bling/vim-bufferline'
Plugin 'suan/vim-instant-markdown'
Plugin 'tpope/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" editor settings
syntax on

set number relativenumber
highlight LineNr ctermfg=240
highlight CursorLineNr ctermfg=red
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave    * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter      * set norelativenumber
augroup END

set laststatus=2
set hlsearch
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd Filetype java setlocal omnifunc=javacomplete#cComplete
let g:SuperTabDefaultCompletionType = "\<c-x>\<c-o>"

set path+=**
set wildignore+=*.pyc
set wildmenu

" code 

map <F6> :setlocal spell! spelllang=en_gb<CR>

inoremap <Space><Space> <Esc>/<TODO><CR>"_c6l
inoremap ;td TODO (dr@dino.ai): 

" html
autocmd FileType html inoremap ;i i<em></em><Space><TODO><ESC>FeT>i

" python
autocmd FileType python inoremap ;c class (<TODO>):<CR>"""<CR><TODO><CR>"""<CR>def __init__(self<TODO>):<CR><TODO><Esc>5k0f(i
autocmd FileType python inoremap ;ac from abc import ABCMeta, abstractmethod, abstractproperty<CR><CR>class (<TODO>):<CR>"""<CR><TODO><CR>"""<CR>def __init__(self<TODO>):<CR><TODO><Esc>5k0f(i
autocmd FileType python inoremap ;w with :<CR><TODO><Esc>k0f:i
autocmd FileType python inoremap ;wa with as <TODO>:<CR><TODO><Esc>k0fha<Space>
autocmd FileType python inoremap ;m if __name__ == '__main__':<CR><Tab>
autocmd FileType python inoremap ;d def (<TODO>):<CR>"""<CR><TODO><CR>"""<CR><TODO><CR>return <TODO><Esc>5k0f(i
autocmd FileType python inoremap ;f for in <TODO>:<CR><TODO><Esc>k0fra<Space>
autocmd FileType python inoremap ;p @property<CR>def (self<TODO>):<CR>"""<CR><TODO><CR>"""<CR><TODO><Esc>4k0f(i
autocmd FileType python inoremap ;ap @abstractproperty<CR>def (self<TODO>):<CR>"""<CR><TODO><CR>"""<CR>raise NotImplementedError()<Esc>4k0f(i
autocmd FileType python inoremap ;am @abstractmethod<CR>def (self<TODO>):<CR>"""<CR><TODO><CR>"""<CR>raise NotImplementedError()<Esc>4k0f(i

autocmd FileType python inoremap ;i if :<CR><TODO><Esc>k0f:i
autocmd FileType python inoremap ;ie if :<CR><TODO><CR><C-d>else:<CR><TODO><Esc>3k0f:i
autocmd FileType python inoremap ;iei if :<CR><TODO><Enter><C-d>elif <TODO>:<Enter><TODO><Esc>3k0f:i

" python - argparse
autocmd FileType python inoremap ;api from argparse import ArgumentParser
autocmd FileType python inoremap ;apo arg_parser = ArgumentParser(description='')<Enter><TODO><ESC>k0f'a
autocmd FileType python inoremap ;apa arg_parser.add_argument('', type=<TODO>, default=<TODO>,<Enter>help='<TODO>')<Enter><TODO><Esc>2k0f'a
autocmd FileType python inoremap ;app args = arg_parser.parse_args()<Enter>

autocmd FileType python inoremap ;h """""""""""""""""""""""""""""""""""""""<CR><Esc>k:read ~/.asci-logo<CR>7jo<CR>"""""""""""""""""""""""""""""""""""""""<CR>

" python - jinja2
autocmd BufNewFile,BufRead *.jinja2 set filetype=jinja2
autocmd BufNewFile,BufRead *.jinja2 set syntax=yaml
autocmd FileType jinja2 inoremap ;s {%- set =<TODO> %}<Enter><TODO><ESC>k0f=i
autocmd FileType jinja2 inoremap ;f {%- for in <TODO>%}<Enter><TODO><Enter>{%- endfor %}<ESC>2k0fra
autocmd FileType jinja2 inoremap ;p {{}}<TODO><ESC>2F}i

" python - sonnet
autocmd FileType python inoremap ;sm class (snt.AbstractModule):<CR>"""<CR><TODO><CR>"""<CR>def __init__(self, name<TODO>):<CR>"""<CR><TODO><CR>"""<CR>super(<TODO>, self).__init__(name=name)<CR><CR><C-d>def _build(self, inputs<TODO>):<CR>"""<CR><TODO><CR>"""<CR><TODO><Esc>14k0f(i
autocmd FileType python inoremap ;sl snt.Linear(output_size=, name=<TODO>)<Esc>2F=a

" encypted files
" Don't save backups of *.gpg files
set backupskip+=*.gpg
" To avoid that parts of the file is saved to .viminfo when yanking or
" deleting, empty the 'viminfo' option.
set viminfo=

augroup encrypted
  au!
  " Disable swap files, and set binary file format before reading the file
  autocmd BufReadPre,FileReadPre *.gpg
    \ setlocal noswapfile bin
  " Decrypt the contents after reading the file, reset binary file format
  " and run any BufReadPost autocmds matching the file name without the .gpg
  " extension
  autocmd BufReadPost,FileReadPost *.gpg
    \ execute "'[,']!gpg --decrypt --default-recipient-self" |
    \ setlocal nobin |
    \ execute "doautocmd BufReadPost " . expand("%:r")
  " Set binary file format and encrypt the contents before writing the file
  autocmd BufWritePre,FileWritePre *.gpg
    \ setlocal bin |
    \ '[,']!gpg --encrypt --default-recipient-self
  " After writing the file, do an :undo to revert the encryption in the
  " buffer, and reset binary file format
  autocmd BufWritePost,FileWritePost *.gpg
    \ silent u |
    \ setlocal nobin
augroup END

" Git functions for statusline
function GitBranch()
    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatusLineGit()
    let l:branchname = GitBranch()
    return strlen(l:branchname) > 0?' '.l:branchname.' ':''
endfunction

" buffer navigation settings
let g:bufferline_echo = 0
autocmd VimEnter *
    \ let &statusline='%{bufferline#refresh_status()}'
      \ .bufferline#get_status_string()
      \ .'%=[%{StatusLineGit()}] %y %{&fileencoding?&fileencoding:&encoding} %p%% %l:%c '

nnoremap  <leader>bl :buffers<CR>:buffer<Space>
nnoremap  <leader>q :bd<CR>

let g:netrw_liststyle = 3
let g:netrw_banner=0
let g:netrw_altv=1 " open splits to the right

nnoremap  <leader>e :Explore<CR>
