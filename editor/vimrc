set nocompatible              " be iMproved, required
filetype off                  " required
set autoindent

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Plugins
Plugin 'scrooloose/nerdtree'
Plugin 'suan/vim-instant-markdown'
Plugin 'tpope/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" editor settings
syntax on
set number
set hlsearch
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd Filetype java setlocal omnifunc=javacomplete#cComplete
let g:SuperTabDefaultCompletionType = "\<c-x>\<c-o>"

" code 

map <F6> :setlocal spell! spelllang=en_gb<CR>

inoremap <Space><Space> <Esc>/<TODO><Enter>"_c6l

" html
autocmd FileType html inoremap ;i i<em></em><Space><TODO><ESC>FeT>i

" python
autocmd FileType python inoremap ;c class (<TODO>):<Enter>"""<Enter><TODO><Enter>"""<Enter><TODO><Enter>return <TODO><Esc>5k0f(i
autocmd FileType python inoremap ;w with :<Enter><TODO><Esc>k0f:i
autocmd FileType python inoremap ;wa with as <TODO>:<Enter><TODO><Esc>k0fha<Space>
autocmd FileType python inoremap ;m if __name__ == '__main__':<Enter><Tab>
autocmd FileType python inoremap ;d def (<TODO>):<Enter>"""<Enter><TODO><Enter>"""<Enter><TODO><Enter>return <TODO><Esc>5k0f(i
autocmd FileType python inoremap ;f for in <TODO>:<Enter><TODO><Esc>k0fra<Space>

autocmd FileType python inoremap ;i if :<Enter><TODO><Esc>k0f:i
autocmd FileType python inoremap ;ie if :<Enter><TODO><Enter><C-d>else:<Enter><TODO><Esc>3k0f:i
autocmd FileType python inoremap ;iei if :<Enter><TODO><Enter><C-d>elif <TODO>:<Enter><TODO><Esc>3k0f:i

" python - argparse
autocmd FileType python inoremap ;api from argparse import ArgumentParser
autocmd FileType python inoremap ;ap arg_parser = ArgumentParser(description='')<Enter><TODO><ESC>k0f'a
autocmd FileType python inoremap ;apa arg_parser.add_argument('', type=<TODO>, default=<TODO>,<Enter>help='<TODO>')<Enter><TODO><Esc>2k0f'a
autocmd FileType python inoremap ;app args = arg_parser.parse_args()<Enter>

" python - jinja2
autocmd BufNewFile,BufRead *.jinja2 set filetype=jinja2
autocmd BufNewFile,BufRead *.jinja2 set syntax=yaml
autocmd FileType jinja2 inoremap ;s {%- set =<TODO> %}<Enter><TODO><ESC>k0f=i
autocmd FileType jinja2 inoremap ;f {%- for in <TODO>%}<Enter><TODO><Enter>{%- endfor %}<ESC>2k0fra
autocmd FileType jinja2 inoremap ;p {{}}<TODO><ESC>2F}i

" python - sonnet

" encypted files
" Don't save backups of *.gpg files
set backupskip+=*.gpg
" To avoid that parts of the file is saved to .viminfo when yanking or
" deleting, empty the 'viminfo' option.
set viminfo=

augroup encrypted
  au!
  " Disable swap files, and set binary file format before reading the file
  autocmd BufReadPre,FileReadPre *.gpg
    \ setlocal noswapfile bin
  " Decrypt the contents after reading the file, reset binary file format
  " and run any BufReadPost autocmds matching the file name without the .gpg
  " extension
  autocmd BufReadPost,FileReadPost *.gpg
    \ execute "'[,']!gpg --decrypt --default-recipient-self" |
    \ setlocal nobin |
    \ execute "doautocmd BufReadPost " . expand("%:r")
  " Set binary file format and encrypt the contents before writing the file
  autocmd BufWritePre,FileWritePre *.gpg
    \ setlocal bin |
    \ '[,']!gpg --encrypt --default-recipient-self
  " After writing the file, do an :undo to revert the encryption in the
  " buffer, and reset binary file format
  autocmd BufWritePost,FileWritePost *.gpg
    \ silent u |
    \ setlocal nobin
augroup END
